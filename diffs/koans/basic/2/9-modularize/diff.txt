< allCounts = _
< 
< -- | Print the three counts.
< printCounts :: ClSF IO StdinClock (Int, Int, Int) ()
< printCounts = proc (lineCount, totalWordCount, totalCharCount) -> do
<   _ -< _
< 
< -- | On every 1000th line, print the number of total words and characters so far.
< printAllCounts :: ClSF IO StdinClock () ()
< printAllCounts = proc () -> do
<   counts@(lineCount, _, _) <- _ -< ()
<   if lineCount `mod` 1000 == 0
<     then _ -< counts
<     else returnA -< ()
< 
< -- For reference, here is the previous implementation.
< -- Can you reuse its pieces to implement the holes above?
< 
< -- | On every 1000th line, print the number of total words and characters so far.
< printAllCountsMonolith :: ClSF IO StdinClock () ()
< printAllCountsMonolith = proc () -> do
> allCounts = proc () -> do
>   returnA -< (lineCount, totalWordCount, totalCharCount)
> -- | Print the three counts.
> printCounts :: ClSF IO StdinClock (Int, Int, Int) ()
> printCounts = proc (lineCount, totalWordCount, totalCharCount) -> do
>   arrMCl print -< lineCount
>   arrMCl print -< totalWordCount
>   arrMCl print -< totalCharCount
> 
> -- | On every 1000th line, print the number of total words and characters so far.
> printAllCounts :: ClSF IO StdinClock () ()
> printAllCounts = proc () -> do
>   counts@(lineCount, _, _) <- allCounts -< ()
<     then do
<       arrMCl print -< lineCount
<       arrMCl print -< totalWordCount
<       arrMCl print -< totalCharCount
>     then printCounts -< counts
